from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from .utils import get_information, safe_json_parse
import app.keyboards as kb
from .states import AddingState

from .database import request as rq

router = Router()



@router.message(CommandStart())
async def cmd_start(message : Message):
    await rq.set_user(message.from_user.id, message.from_user.first_name)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥.', reply_markup=kb.to_main)


@router.message(Command('quote'))
async def cmd_quote(message : Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: SBER")


@router.callback_query(F.data == 'main_menu')
async def main_menu(callback : CallbackQuery, state : FSMContext):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!')
    await state.clear()
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=kb.main_menu)


@router.callback_query(F.data == 'help')
async def help(callback : CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å"')
    await callback.message.answer('–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â—å!', reply_markup=kb.to_main)


@router.callback_query(F.data == 'bag')
async def bag(callback : CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ—Ä—Ç—Ñ–µ–ª—å"')

    bag = await rq.open_bag(callback.from_user.id)
    tickers = safe_json_parse(bag if bag else None, default=[])

    if bag == None:
        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ' \
                                        '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=kb.to_main)
    elif bag == []:
        await callback.message.edit_text('–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!', reply_markup=kb.to_main)
    else:
        message = "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n" + "\n".join(
            f"‚Ä¢ {ticker}" for ticker in tickers
        )
        await callback.message.edit_text(message, reply_markup= await kb.inline_stocks(tickers))


@router.callback_query(F.data == 'price')
async def check_price(callback : CallbackQuery, state : FSMContext):
    await callback.answer('')
    await state.set_state(AddingState.stock)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏!")


@router.message(AddingState.stock)
async def show_price(message : Message, state : FSMContext):
    stock = message.text
    await state.update_data(stock=stock)
    try:
        await message.answer(
            f"üìä –ê–∫—Ü–∏—è {stock.upper()}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_information(stock.upper())['LAST']}\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∞–∫—Ü–∏—é –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å",
            reply_markup=kb.after_checking_price,
        )
    except Exception as e:
        await state.update_data(stock=None)
        await message.answer(
            "üîç –¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: SBER, GAZP"
        )


@router.callback_query(F.data == 'add')
async def add_to_bag(callback : CallbackQuery, state : FSMContext):
    await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏...')
    stock = await state.get_data()
    success = await rq.add_stock(callback.from_user.id, stock['stock'])
    if success:
        await callback.message.answer("–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏")
        await state.update_data(stock=None)


@router.callback_query(F.data.startswith('stock_'))
async def show_stock_info(callback : CallbackQuery):
    await callback.answer('Echo')
    ticker = callback.data.split('_')[1]
    info = get_information(ticker)
    await callback.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {info['shortname']}\n \
                                     –¶–µ–Ω–∞: {info['LAST']} \n ")
